server:
  port: 10018
  servlet:
    encoding:
      charset: UTF-8
      force: true
    context-path: /auth
  compression:
    enabled: true #开启数据压缩
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 2048
logging:
  file:
    path: log/wookit
  level:
    root: info
    "[javax.management]": INFO
    "[org.apache.http]": INFO
    "[org.apache.tomcat.util.net.NioEndpoint]": INFO
    "[sun.rmi]": INFO
    tracer: trace # 开启trace级别日志,在开发时可以开启此配置,则控制台可以打印es全部请求信息及DSL语句,为了避免重复,开启此项配置后,可以将EE的print-dsl设置为false.

spring:
  application:
    name: authservice
  cloud:
    gateway:
      discovery:
        locator:
          lower-case-service-id: true
          enabled: true
    nacos:
      discovery:
        server-addr: 39.108.209.226:8848
        namespace: 25bd35ca-4bcf-403c-a0fe-4bea97a8e711

  redis:
    host: 119.23.214.109 #Redis服务器地址
    database: 14 # Redis数据库索引（默认为0）
    port: 30004 # Redis服务器连接端口
    password: 123456 # Redis服务器连接密码（默认为空）
    jedis:
      pool:
        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8 # 连接池中的最大空闲连接
        min-idle: 0 # 连接池中的最小空闲连接
  shardingsphere:
    props:
      sql-show: true
    datasource:
      ds0:
        username: fujica
        password: fujicaV2@2024
        url: jdbc:mysql://39.108.209.226:3306/authservice?useSSL=false&serverTimezone=GMT%2b8
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        validation-timeout: 3000
        idle-timeout: 60000
        minimum-idle: 30
        read-only: false
        connection-timeout: 60000 #请求连接的超时时间
        maximum-pool-size: 1000 #最大连接数量
        max-lifetime: 1800000 #连接的最长生命周期
        connection-test-query: select 1 #连接验证sql
      names: ds0
    rules:
      sharding:
        sharding-algorithms:
          # 分表算法
          table-parkin:
            type: INLINE
            props:
              algorithm-expression: auth_park_in_$->{Math.abs(project_no.hashCode()%10) +1}
          table-parkout:
            type: INLINE
            props:
              algorithm-expression: auth_park_out_$->{Math.abs(project_no.hashCode()%10) +1}

        tables:
          auth_park_in:
            actual-data-nodes: ds0.auth_park_in_$->{1..10}
            key-generate-strategy:
              column: project_no
              key-generator-name: projectuuid
            # 分表策略
            table-strategy:
              standard:
                sharding-column: project_no
                sharding-algorithm-name: table-parkin
          auth_park_out:
            actual-data-nodes: ds0.auth_park_out_$->{1..10}
            key-generate-strategy:
              column: project_no
              key-generator-name: projectuuid
            # 分表策略
            table-strategy:
              standard:
                sharding-column: project_no
                sharding-algorithm-name: table-parkout
        key-generators:
          projectuuid:
            type: UUID
    mode:
      type: Standalone


#指定mybatis映射文件的地址
mybatis:
  mapper-locations: classpath:mapper/*.xml


rocketmq:
  name-server: 120.77.181.137:9876
  producer:
    group: fujica-producer
    topic: 
      topicDcEventAdd: topic_dc_event_add_local
      topicDcEventBatchAdd: topic_dc_event_batch_add_local
      topicExPushParkIn: push_park_in_data_local
      topicExPushParkOut: push_park_out_data_local
      topicExPushModifyPlate: push_modify_plate_data_local

  consumer:
    topic: 
      keepAlive: keep_alive_local
      ivsResult: ivs_result_local
      getDeviceTimestamp: get_device_timestamp_reply_local
    group: 
      keepAlive: keep_alive_local
      ivsResult: ivs_result_local
      getDeviceTimestamp: get_device_timestamp_reply_local

async:
  corePoolSize: 5
  maxPoolSize: 10
  queueCapacity: 20
  namePrefix: async-service-